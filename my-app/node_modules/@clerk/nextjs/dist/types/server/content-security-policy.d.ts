/**
 * Valid CSP directives according to the CSP Level 3 specification
 */
export type CSPDirective = 'connect-src' | 'default-src' | 'font-src' | 'img-src' | 'media-src' | 'object-src' | 'script-src' | 'style-src' | 'base-uri' | 'child-src' | 'form-action' | 'frame-ancestors' | 'frame-src' | 'manifest-src' | 'navigate-to' | 'prefetch-src' | 'worker-src' | 'plugin-types' | 'require-sri-for' | 'sandbox' | 'block-all-mixed-content' | 'require-trusted-types-for' | 'trusted-types' | 'upgrade-insecure-requests' | 'report-to' | 'report-uri' | 'script-src-attr' | 'script-src-elem' | 'style-src-attr' | 'style-src-elem';
/**
 * The mode to use for generating the CSP header
 *
 * - `standard`: Standard CSP mode
 * - `strict-dynamic`: Strict-dynamic mode, also generates a nonce
 */
export type CSPMode = 'standard' | 'strict-dynamic';
/**
 * Partial record of directives and their values
 */
type CSPValues = Partial<Record<CSPDirective, string[]>>;
/**
 * Return type for createCSPHeader
 */
export interface CSPHeaderResult {
    /** The formatted CSP header string */
    header: string;
    /** The generated nonce, if applicable */
    nonce?: string;
}
/**
 * Generates a secure random nonce for CSP headers
 * @returns A base64-encoded random nonce
 */
export declare function generateNonce(): string;
/**
 * Creates a Content Security Policy (CSP) header with the specified mode and host
 * @param mode - The CSP mode to use ('standard' or 'strict-dynamic')
 * @param host - The host to include in the CSP (parsed from publishableKey)
 * @param customDirectives - Optional custom directives to merge with
 * @returns Object containing the formatted CSP header and nonce (if in strict-dynamic mode)
 */
export declare function createCSPHeader(mode: CSPMode, host: string, customDirectives?: CSPValues): CSPHeaderResult;
export {};
//# sourceMappingURL=content-security-policy.d.ts.map