{"version":3,"sources":["../../../src/server/content-security-policy.ts"],"sourcesContent":["/**\n * Valid CSP directives according to the CSP Level 3 specification\n */\nexport type CSPDirective =\n  // Default resource directives\n  | 'connect-src'\n  | 'default-src'\n  | 'font-src'\n  | 'img-src'\n  | 'media-src'\n  | 'object-src'\n  | 'script-src'\n  | 'style-src'\n  // Framing and navigation directives\n  | 'base-uri'\n  | 'child-src'\n  | 'form-action'\n  | 'frame-ancestors'\n  | 'frame-src'\n  | 'manifest-src'\n  | 'navigate-to'\n  | 'prefetch-src'\n  | 'worker-src'\n  // Sandbox and plugin directives\n  | 'plugin-types'\n  | 'require-sri-for'\n  | 'sandbox'\n  // Trusted types and upgrade directives\n  | 'block-all-mixed-content'\n  | 'require-trusted-types-for'\n  | 'trusted-types'\n  | 'upgrade-insecure-requests'\n  // Reporting directives\n  | 'report-to'\n  | 'report-uri'\n  // CSP Level 3 additional directives\n  | 'script-src-attr'\n  | 'script-src-elem'\n  | 'style-src-attr'\n  | 'style-src-elem';\n\n/**\n * The mode to use for generating the CSP header\n *\n * - `standard`: Standard CSP mode\n * - `strict-dynamic`: Strict-dynamic mode, also generates a nonce\n */\nexport type CSPMode = 'standard' | 'strict-dynamic';\n\n/**\n * Partial record of directives and their values\n */\ntype CSPValues = Partial<Record<CSPDirective, string[]>>;\n\n/**\n * Directives and their values\n */\ntype CSPDirectiveSet = Record<CSPDirective, Set<string>>;\n\n/**\n * Return type for createCSPHeader\n */\nexport interface CSPHeaderResult {\n  /** The formatted CSP header string */\n  header: string;\n  /** The generated nonce, if applicable */\n  nonce?: string;\n}\n\nclass CSPDirectiveManager {\n  /** Set of special keywords that require quoting in CSP directives */\n  private static readonly KEYWORDS = new Set([\n    'none',\n    'self',\n    'strict-dynamic',\n    'unsafe-eval',\n    'unsafe-hashes',\n    'unsafe-inline',\n  ]);\n\n  /** Default CSP directives and their values */\n  static readonly DEFAULT_DIRECTIVES: CSPValues = {\n    'connect-src': [\n      'self',\n      'https://clerk-telemetry.com',\n      'https://*.clerk-telemetry.com',\n      'https://api.stripe.com',\n      'https://maps.googleapis.com',\n    ],\n    'default-src': ['self'],\n    'form-action': ['self'],\n    'frame-src': [\n      'self',\n      'https://challenges.cloudflare.com',\n      'https://*.js.stripe.com',\n      'https://js.stripe.com',\n      'https://hooks.stripe.com',\n    ],\n    'img-src': ['self', 'https://img.clerk.com'],\n    'script-src': [\n      'self',\n      ...(process.env.NODE_ENV !== 'production' ? ['unsafe-eval'] : []),\n      'unsafe-inline',\n      'https:',\n      'http:',\n      'https://*.js.stripe.com',\n      'https://js.stripe.com',\n      'https://maps.googleapis.com',\n    ],\n    'style-src': ['self', 'unsafe-inline'],\n    'worker-src': ['self', 'blob:'],\n  };\n\n  /**\n   * Creates a new CSPDirectiveSet with default values\n   * @returns A new CSPDirectiveSet with default values\n   */\n  static createDefaultDirectives(): CSPDirectiveSet {\n    return Object.entries(this.DEFAULT_DIRECTIVES).reduce((acc, [key, values]) => {\n      acc[key as CSPDirective] = new Set(values);\n      return acc;\n    }, {} as CSPDirectiveSet);\n  }\n\n  /**\n   * Checks if a value is a special keyword that requires quoting\n   * @param value - The value to check\n   * @returns True if the value is a special keyword\n   */\n  static isKeyword(value: string): boolean {\n    return this.KEYWORDS.has(value.replace(/^'|'$/g, ''));\n  }\n\n  /**\n   * Formats a value according to CSP rules, adding quotes for special keywords\n   * @param value - The value to format\n   * @returns The formatted value\n   */\n  static formatValue(value: string): string {\n    const unquoted = value.replace(/^'|'$/g, '');\n    return this.isKeyword(unquoted) ? `'${unquoted}'` : value;\n  }\n\n  /**\n   * Handles directive values, ensuring proper formatting and special case handling\n   * @param values - Array of values to process\n   * @returns Set of formatted values\n   */\n  static handleDirectiveValues(values: string[]): Set<string> {\n    const result = new Set<string>();\n\n    if (values.includes(\"'none'\") || values.includes('none')) {\n      result.add(\"'none'\");\n      return result;\n    }\n\n    values.forEach(v => result.add(this.formatValue(v)));\n    return result;\n  }\n}\n\n/**\n * Handles merging of existing directives with new values\n * @param mergedCSP - The current merged CSP state\n * @param key - The directive key to handle\n * @param values - New values to merge\n */\nfunction handleExistingDirective(mergedCSP: CSPDirectiveSet, key: CSPDirective, values: string[]) {\n  // None overrides all other values\n  if (values.includes(\"'none'\") || values.includes('none')) {\n    mergedCSP[key] = new Set([\"'none'\"]);\n    return;\n  }\n\n  // For existing directives, merge the values rather than replacing\n  const deduplicatedSet = new Set<string>();\n\n  mergedCSP[key].forEach(value => {\n    deduplicatedSet.add(CSPDirectiveManager.formatValue(value));\n  });\n\n  values.forEach(value => {\n    deduplicatedSet.add(CSPDirectiveManager.formatValue(value));\n  });\n\n  mergedCSP[key] = deduplicatedSet;\n}\n\n/**\n * Handles custom directives that are not part of the default set\n * @param customDirectives - Map of custom directives\n * @param key - The directive key\n * @param values - Values for the directive\n */\nfunction handleCustomDirective(customDirectives: Map<string, Set<string>>, key: string, values: string[]) {\n  // None overrides all other values\n  if (values.includes(\"'none'\") || values.includes('none')) {\n    customDirectives.set(key, new Set([\"'none'\"]));\n    return;\n  }\n\n  const formattedValues = new Set<string>();\n  values.forEach(value => {\n    const formattedValue = CSPDirectiveManager.formatValue(value);\n    formattedValues.add(formattedValue);\n  });\n\n  customDirectives.set(key, formattedValues);\n}\n\n/**\n * Applies formatting to the CSP header\n * @param mergedCSP - The merged CSP state to format\n * @returns Formatted CSP header string\n */\nfunction formatCSPHeader(mergedCSP: Record<string, Set<string>>): string {\n  return Object.entries(mergedCSP)\n    .sort(([a], [b]) => a.localeCompare(b))\n    .map(([key, values]) => {\n      const valueObjs = Array.from(values).map(v => ({\n        raw: v,\n        formatted: CSPDirectiveManager.formatValue(v),\n      }));\n\n      return `${key} ${valueObjs.map(item => item.formatted).join(' ')}`;\n    })\n    .join('; ');\n}\n\n/**\n * Generates a secure random nonce for CSP headers\n * @returns A base64-encoded random nonce\n */\nexport function generateNonce(): string {\n  const randomBytes = new Uint8Array(16);\n  crypto.getRandomValues(randomBytes);\n  const binaryString = Array.from(randomBytes, byte => String.fromCharCode(byte)).join('');\n  return btoa(binaryString);\n}\n\n/**\n * Creates a merged CSP state with all necessary directives\n * @param mode - The CSP mode to use\n * @param host - The host to include in CSP\n * @param customDirectives - Optional custom directives to merge with\n * @param nonce - Optional nonce for strict-dynamic mode\n * @returns Merged CSPDirectiveSet\n */\nfunction createMergedCSP(\n  mode: CSPMode,\n  host: string,\n  customDirectives?: Record<string, string[]>,\n  nonce?: string,\n): Record<string, Set<string>> {\n  // Initialize with default Clerk CSP values\n  const mergedCSP = CSPDirectiveManager.createDefaultDirectives();\n  mergedCSP['connect-src'].add(host);\n\n  // Handle strict-dynamic mode specific changes\n  if (mode === 'strict-dynamic') {\n    mergedCSP['script-src'].delete('http:');\n    mergedCSP['script-src'].delete('https:');\n    mergedCSP['script-src'].add(\"'strict-dynamic'\");\n    if (nonce) {\n      mergedCSP['script-src'].add(`'nonce-${nonce}'`);\n    }\n  }\n\n  // Add custom directives if provided\n  const customDirectivesMap = new Map<string, Set<string>>();\n  if (customDirectives) {\n    Object.entries(customDirectives).forEach(([key, values]) => {\n      const valuesArray = Array.isArray(values) ? values : [values];\n      if (CSPDirectiveManager.DEFAULT_DIRECTIVES[key as CSPDirective]) {\n        handleExistingDirective(mergedCSP, key as CSPDirective, valuesArray);\n      } else {\n        handleCustomDirective(customDirectivesMap, key, valuesArray);\n      }\n    });\n  }\n\n  // Combine standard directives with custom directives\n  const finalCSP: Record<string, Set<string>> = { ...mergedCSP };\n  customDirectivesMap.forEach((values, key) => {\n    finalCSP[key] = values;\n  });\n\n  return finalCSP;\n}\n\n/**\n * Creates a Content Security Policy (CSP) header with the specified mode and host\n * @param mode - The CSP mode to use ('standard' or 'strict-dynamic')\n * @param host - The host to include in the CSP (parsed from publishableKey)\n * @param customDirectives - Optional custom directives to merge with\n * @returns Object containing the formatted CSP header and nonce (if in strict-dynamic mode)\n */\nexport function createCSPHeader(mode: CSPMode, host: string, customDirectives?: CSPValues): CSPHeaderResult {\n  const nonce = mode === 'strict-dynamic' ? generateNonce() : undefined;\n\n  return {\n    header: formatCSPHeader(createMergedCSP(mode, host, customDirectives, nonce)),\n    nonce,\n  };\n}\n"],"mappings":"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","names":[]}